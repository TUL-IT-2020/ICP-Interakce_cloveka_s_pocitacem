struct uniform_info
{ 
	GLint location;
	GLsizei count;
};

GLint uniform_count = 0;
glGetProgramiv(program_name, GL_ACTIVE_UNIFORMS, &uniform_count);

if (uniform_count != 0)
{
	GLint 	max_name_len = 0;
	GLsizei length = 0;
	GLsizei count = 0;
	GLenum 	type = GL_NONE;
	glGetProgramiv(program_name, GL_ACTIVE_UNIFORM_MAX_LENGTH, &max_name_len);
	
	auto uniform_name = std::make_unique<char[]>(max_name_len);

	std::unordered_map<std::string, uniform_info> uniforms;

	for (GLint i = 0; i < uniform_count; ++i)
	{
		// https://docs.gl/gl4/glGetActiveUniform
        glGetActiveUniform(program_name, i, max_name_len, &length, &count, &type, uniform_name.get());

		uniform_info_t uniform_info = {};
		uniform_info.location = glGetUniformLocation(program_name, uniform_name.get());
		uniform_info.count = count;

		uniforms.emplace(std::make_pair(std::string(uniform_name.get(), length), uniform_info));
	}
}

##################
##     USAGE
##################

// NOTE: you can use  glProgramUniformXX(...) instead glUniformXX(...)
//       Shader program does not have to be active - BINDLESS.

// uniform arrays allows to address subelements as array_location + element_number
glProgramUniformXX(program_name, uniforms.at("my_array[0]").location + 5, value);

// if you want to modify the whole array
glProgramUniformXXv(program_name, uniforms.at("my_array[0]").location, uniforms.at("my_array[0]").count, my_array);


//
// check the presence (exceptions are slow(er))
auto search = uniforms.find("my_array[0]"); 
if (search != uniforms.end()) {
    glProgramUniformXX(program_name, search->second.location, value);    
} else {
    //not found
} 
